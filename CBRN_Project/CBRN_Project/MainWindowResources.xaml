
<!-- This resource dictionary is used by the MainWindow -->    
<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:vm="clr-namespace:CBRN_Project.MVVM.ViewModels"
                    xmlns:vw="clr-namespace:CBRN_Project.MVVM.Views">

    <ResourceDictionary.MergedDictionaries>
        <!-- MahApps.Metro resource dictionaries. Make sure that all file names are Case Sensitive! -->
        <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Controls.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Fonts.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Colors.xaml" />
        <!-- Accent and AppTheme setting -->
        <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Accents/Blue.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Accents/BaseLight.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <Color x:Key="AccentColor">#CCD80073</Color>

    <BooleanToVisibilityConverter x:Key="BooleanToVisibility"/>

    <!-- This template applies an MainPageView to an instance
        of MainPageViewModel class shown in the main window -->

    <DataTemplate DataType="{x:Type vm:StartViewModel}">
        <vw:StartView/>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vm:MainWindowViewModel}">
        <vw:MainView/>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vm:CreateIconInput1ViewModel}">
        <vw:CreateIconInput1View/>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vm:CreateIconInput2ViewModel}">
        <vw:CreateIconInput2View/>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vm:IconListViewModel}">
        <vw:IconsListView/>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vm:MethParamsViewModel}">
        <vw:MethParamsView/>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vm:DailyReportViewModel}">
        <vw:DailyReportView/>
    </DataTemplate>

    <!--
      This style ensures that the borders in the main window are consistent.
      -->
    <Style x:Key="MainBorderStyle" TargetType="{x:Type Border}">
        <Setter Property="Background" Value="WhiteSmoke" />
        <Setter Property="BorderBrush" Value="LightGray" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="CornerRadius" Value="5" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
    </Style>

    <!-- 
    This style configures both of the main content areas in the main window.
    -->
    <Style x:Key="MainStyle" TargetType="{x:Type HeaderedContentControl}">
        <Setter Property="HeaderTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Border 
                        Background="{StaticResource Brush_HeaderBackground}" 
                        BorderBrush="AliceBlue" 
                        BorderThickness="0" 
                        CornerRadius="2" 
                        Margin="4" 
                        Padding="4" 
                        SnapsToDevicePixels="True">
                            <TextBlock 
                              FontSize="14"
                              FontWeight="ExtraBold"
                              FontStretch="SemiExpanded"
                              FontFamily="Segoe UI Semibold"
                              Foreground="White" 
                              HorizontalAlignment="Center"  
                              Text="{TemplateBinding Content}"/>    
                    </Border>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <!-- This template ensures that content of a HeaderedContentControl 
                    fills the available vertical space. --> 
                <ControlTemplate TargetType="{x:Type HeaderedContentControl}">
                    <DockPanel>
                        <ContentPresenter 
                          DockPanel.Dock="Top"
                          ContentSource="Header" 
                          ContentTemplate="{TemplateBinding HeaderTemplate}" 
                          />    
                        <ContentPresenter 
                          ContentSource="Content" 
                          ContentTemplate="{TemplateBinding ContentTemplate}" 
                          />
                    </DockPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MainStyleNoTab" TargetType="{x:Type HeaderedContentControl}">
        <Setter Property="HeaderTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Border 
                        Background="{StaticResource Brush_HeaderBackground}" 
                        BorderBrush="AliceBlue" 
                        BorderThickness="0" 
                        CornerRadius="2" 
                        Margin="4" 
                        Padding="4" 
                        SnapsToDevicePixels="True">
                        <TextBlock 
                              FontSize="14"
                              FontWeight="ExtraBold"
                              FontStretch="SemiExpanded"
                              FontFamily="Segoe UI Semibold"
                              Foreground="White" 
                              HorizontalAlignment="Center"  
                              Text="{TemplateBinding Content}"/>
                    </Border>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <!-- This template ensures that content of a HeaderedContentControl 
                    fills the available vertical space. -->
                <ControlTemplate TargetType="{x:Type HeaderedContentControl}">
                    <DockPanel>
                        <ContentPresenter 
                          DockPanel.Dock="Top"
                          ContentSource="Header" 
                          ContentTemplate="{TemplateBinding HeaderTemplate}" 
                          />
                        <ContentPresenter 
                          ContentSource="Content" 
                          ContentTemplate="{TemplateBinding ContentTemplate}" 
                          />
                    </DockPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- 
  This template explains how to render 
  a tab item with a close button.
  -->
    <DataTemplate x:Key="ClosableTabItemTemplate">
        <Grid Width="85">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="4*"/>
                <ColumnDefinition Width="0.5*"/>
                <ColumnDefinition Width="2*"/>
            </Grid.ColumnDefinitions>
            <Button Grid.Column="2"
                Command="{Binding Path=CloseCommand}"
                Content="X"
                Cursor="Hand"
                DockPanel.Dock="Right"
                Focusable="False"
                FontFamily="Courier" 
                FontSize="8"
                FontWeight="Bold"  
                Margin="0,1,0,0"
                Padding="0"
                VerticalContentAlignment="Center"
                Height="8" 
            />
            <ContentPresenter 
                Grid.Column="0"
                TextBlock.FontSize="12"
                TextBlock.FontWeight="Bold"
                Content="{Binding Path=DisplayName}" 
                VerticalAlignment="Center" 
            />
        </Grid>
    </DataTemplate>

    <!--
  This template explains how to render the 'Workspace' content area in the main window.
  -->
    <DataTemplate x:Key="WorkspacesTemplate">
        <TabControl 
          IsSynchronizedWithCurrentItem="True" 
          ItemsSource="{Binding}" 
          ItemTemplate="{StaticResource ClosableTabItemTemplate}"
          Margin="4">
            <TabControl.Template>
                <ControlTemplate TargetType="TabControl">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>
                        <ScrollViewer HorizontalScrollBarVisibility="Auto" 
                                      VerticalScrollBarVisibility="Disabled"
                                      FlowDirection="LeftToRight"
                                      VerticalAlignment="Top">
                            <TabPanel x:Name="HeaderPanel"
                              Panel.ZIndex ="1" 
                              KeyboardNavigation.TabIndex="1"
                              Grid.Column="0"
                              Grid.Row="0"
                              Margin="2,2,2,0"
                              IsItemsHost="true"/>
                        </ScrollViewer>
                        <ContentPresenter x:Name="PART_SelectedContentHost"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          Margin="{TemplateBinding Padding}"
                                          ContentSource="SelectedContent"
                                          />
                    </Grid>
                </ControlTemplate>
            </TabControl.Template>
        </TabControl>
    </DataTemplate>

    <!--
  This template explains how to render the list of commands on the left
  side in the main window (the 'Control Panel' area).
  -->
    <DataTemplate x:Key="CommandsTemplate">
        <ItemsControl IsTabStop="False" ItemsSource="{Binding}" Margin="6,2">
            <ItemsControl.ItemTemplate>
                <DataTemplate>
                    <TextBlock Margin="2,6">
            <Hyperlink Command="{Binding Path=Command}">
              <TextBlock Text="{Binding Path=DisplayName}" />
            </Hyperlink>
          </TextBlock>
                </DataTemplate>
            </ItemsControl.ItemTemplate>
        </ItemsControl>
    </DataTemplate>

    <!-- 
  This template explains how to render 
  a tab item with a close button.
  -->
   

</ResourceDictionary>